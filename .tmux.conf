# Tmux 3.1cでの設定
# 2021/06/05

# 基本設定
## 256色端末を使用する
# set -g default-terminal "screen-256color"
set-option -g default-terminal "screen-256color"
# 24bit color(from ver 3.0)
# set -sa terminal-overrides ",xterm*:Tc"
set-option -sa terminal-overrides ",xterm*:Tc"
set -gw xterm-keys on

# ペインでの作業をロギングする。出力はバイナリなのでless -Rで読む。
#bind -T root -n C-p pipe-pane -o 'cat >> ~/log-tmux-output.#I-#P' \; display "pipe output"

## Escキーの遅延を解消
set -s escape-time 0
## status line を更新する間隔を1秒にする
set-option -g status-interval 1
## ウィンドウのインデックスを1から始める
set -g base-index 1
## ペインのインデックスを1から始める
setw -g pane-base-index 1
## アクティブなペインのみ白っぽく変更（真っ黒は232）
# set -g window-style 'bg=colour236'
# set -g window-active-style 'bg=colour234'
# ↓fixed
# set -g window-style 'bg=colour235'
# set -g window-active-style 'bg=colour233'

# tmuxの表示内容をリダイレクトできるようにデバイス番号を表示
setw -g pane-border-status bottom
#setw -g pane-border-format '#{pane_tty} | #{pane_current_path}'
setw -g pane-border-format '#{pane_tty}'
## リダイレクトを使ってstdout, stderrなどを任意のデバイス番号
## の端末に出力できる

# prefixキーと数字でステータスバーの表示位置変更
# prefixキーと数字でボーダステータスバーの表示オンオフ
bind -T prefix -n 1 set-option -g status-position top
bind -T prefix -n 2 set-option -g status-position bottom
bind -T prefix -n 3 setw -g pane-border-status off
bind -T prefix -n 4 setw -g pane-border-status bottom
bind -T prefix -n 5 attach-session -t . -c '#{pane_current_path}' \; display 'attach-session #{pane_current_path}'
bind -T prefix -n c attach-session -t . -c '#{pane_current_path}' \; new-window \; display "create new window"

# terminalのタイトルを変更
set-option -g set-titles on
set-option -g set-titles-string "#S @ #H"

# status lineの設定
## ステータスバーをトップに配置する
set-option -g status-position top
## window-status を中央揃えで配置する
set-option -g status-justify "centre"
# status line の背景色を指定する。
#set-option -g status-bg "colour235"
set-option -g status-bg "colour22"
## status line の文字色を指定する。
#set-option -g status-fg "colour255"
set-option -g status-fg "colour100"
# ステータスバーを1秒毎に描画し直す
set-option -g status-interval 1
## status-left の最大の長さを指定する。
#set-option -g status-left-length 90
## status-left のフォーマットを指定する。
#set-option -g status-left "#[fg=colour255,bg=colour241]Session: #S #[default]"
set-option -g status-left "#[fg=colour255,bg=colour28]Session: #S #[default]"
## window-status のフォーマットを指定する。
set-window-option -g window-status-format " #I: #W "
## カレントウィンドウの window-status のフォーマットを指定する 27
set-window-option -g window-status-current-format "#[fg=colour255,bg=colour24,bold] #I: #W #[default]"
#set-option -g status-right "#[fg=colour255,bg=colour241] #h | LA: #(cut -d' ' -f-3 /proc/loadavg) | %m/%d %H:%M:%S#[default]"
#set-option -g status-right "#[fg=colour255,bg=colour241] #h | %Y/%m/%d(%a) %H:%M:%S"
set-option -g status-right "#[fg=colour255,bg=colour22] #h | %Y/%m/%d(%a) %H:%M:%S"

# tmuxのスペニット機能
## send-keys test
bind -T root -n å send-keys qqqq
# 以下のような設定があるとprefix + 1を押すだけで入力できる
# bind -T prefix -n 1 send-keys "import os\nimport sys\n"

# historyのサイズ
set -g history-limit 10000

# choose tree
## aggressive resizeを使っていないとフィットしない
set-window-option -g aggressive-resize

# Ctrl + tでセッション選択一覧を表示
bind -T root -n C-t choose-tree -Zs \; display "choose tree." \; resize-window -A

# resize-window
## リサイズしたとき表示が乱れたのを再描画する
# bind -T root -n C-w resize-window -A \; refresh-client -S \; display "resize and refresh window"
bind -T prefix -n z resize-window -A \; refresh-client -S \; display "resize and refresh window"
# resize-window(this mean refreshing window)
bind -T root -n C-S-r resize-window -A \; refresh-client -S \; display "resize and refresh window"

# キーの割り当て変更
## prefixキーの割り当て(Ctr+a)
set -g prefix C-a

# prefix + rで設定ファイルをリロード
bind-key r source-file ~/.tmux.conf \; display "~/.tmux.conf was reloaded!"

# windowをShift + 矢印キーで移動する
bind -T root -n S-Left  previous-window
bind -T root -n S-Right next-window

# split window
## prefix + -, prefix + vで水平分割
## prefix + \, prefix + hで垂直分割
bind -T prefix -n | split-window -h
bind -T prefix -n - split-window -v
bind -T prefix -n v split-window -h
bind -T prefix -n h split-window -v

# ペインの移動をprefixなしで行う（Ctrl + 矢印キー）
# bind -T root -n C-S-Left select-pane -L \; display "move to left."
# bind -T root -n C-S-Down select-pane -D \; display "movo to down."
# bind -T root -n C-S-Up select-pane -U \; display "movo to up."
# bind -T root -n C-S-Right select-pane -R \; display "movo to right."
bind -T root -n C-Left select-pane -L \; display "move to left."
bind -T root -n C-Down select-pane -D \; display "movo to down."
bind -T root -n C-Up select-pane -U \; display "movo to up."
bind -T root -n C-Right select-pane -R \; display "movo to right."

# ペインの順次移動をCtr + o に設定
bind -n C-o select-pane -t :.+

# resize window
bind -r -T prefix -n Down resize-pane -D 1 \; display "resize-pane. -D"
bind -r -T prefix -n Up resize-pane -U 1 \; display "resize-pane. -U"
bind -r -T prefix -n Left resize-pane -L 1 \; display "resize-pane. -L"
bind -r -T prefix -n Right resize-pane -R 1 \; display "resize-pane. -R"

# helps
bind -T root -n S-h list-keys

# 並列実行のトグル化 prefix + e
bind e setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"

# マウス操作を有効化
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# バインド解除
unbind C-b
unbind C-p
unbind C-n
unbind C-w

# コマンドモードでの選択方法をvim風に変更
set-window-option -g mode-keys vi
setw -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection

# copy-paste mode
## copyモードに入る
bind-key -T prefix -n [ copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection \; display "yank(copy)"
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
## pasteする
bind-key -T prefix -n p paste-buffer
## bufferを見る
bind-key -T prefix -n l list-buffers
